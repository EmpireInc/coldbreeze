
объявления
оптимизация изображений

второй квадратик новостная лента мбуз дкгб 
 
вопрос ответ в режиме онлайн



Article of element updating:
 
        +--------------+
        |   Block1     |
        |              |
        +--------------+

        +--------------+    +----------------+      +--------------+
        |   Brick2     +---->   Expand3      |   +--+   Expand5    |
        |              |    |                |   |  |              |
        +--------------+    +----------------+   |  +--------------+
                            +----------------+   |  +--------------+
                            |                |   |  |   Expand6    |
                            |   Brick4       +---+  |              |
                            |                |      |              |
                            +----------------+      +--------------+
                            +----------------+
                            |                |
                            |   Expand7      |
                            |                |
                            +----------------+
Обновление происходит если начинать с блоков, которые позже expand.
Например если начало идет с 4 блока
то блок 3 обновится
если начало идет с 6 блока, то блоки 3 и 5 обновятся
Если начало идет с 7 блока, то блоки 3 5 6 должны обновится
Для проверки обновления существует метод
  updateChecker(element, station_checker:Boolean = false) of BPLogger class
По умолочанию, он проверяет expands в логах, но при true вторым аргументом, он будет скать по шагам

Далее запускается обновление у всех элементов в процессе, которые требуют обновлений(EXPAND, TEMPORARLY(INPUTS PLACEHOLDER))







----------
Instanciate
----------



----------
Sygnals
----------
Paused
----------
Codelint
----------
Station & logger after every move update to db observer
----------
update element
----------
order assign, movements with orders
----------
autojoin test
----------

----------
ischeme, icall
----------
condition
----------
ownership resact block
----------
CRUD 
------------







* Input try
http://jsfiddle.net/fdDph/9/
http://plnkr.co/edit/mNs6HB86p6ioByul0GD9?p=preview
http://embed.plnkr.co/TAXmsQlSkYhY2isCKIAw/preview


-------------------------------------------------------
-------------------------------------------------------
* Data sync from logger to composite values of proc elements


* TempItem Restore(expands, input)
* RunFromSpace
* Space Data sync from logger to composite values of proc elements
* Space TempItem Restore(expands, input)



Input -> Input call -> Station



* Error ajax
http://kufli.blogspot.ru/2013/08/sprayio-rest-service-exception.html
http://plnkr.co/edit/lzYaZt?p=preview
http://www.egobrain.ru/blog/2014/02/13/obrabotka-oshibok-poumolchaniiu-angularjs/



* Security Restrict DTO Action(bprocess, procelems, space, check access)

* Change ID to LONG everywhere
* selector attributes for Station while INPUT REQUEST occurred




  * Ownings
  * Companion ResAct -> Input, Times ...


* Blocks {
  ** Condition
  * Confirm

  || Process owning, viewers, access // by owning tables Employees/Clients/Firm + Groups assigns
  * scope ctx, bp views

}









































* Misc

    * error handling [checker before invoke, brick error - though invoking] /isOptionalLink/* checker for arguments and params [ ]
    * Dopel feature

  * Graph.js

  /** 2 Books read **/
    http://www.mulesoft.com/platform/soa
    http://www.activiti.org/userguide/index.html#bpmnSequenceFlow
    http://www.activiti.org/userguide/index.html#bpmnTask
    http://www.activiti.org/userguide/index.html#bpmnGateways
    http://www.activiti.org/userguide/index.html#bpmnSubprocessAndCallActivity


/Final/
  * Collab & sharing
  * Link block[Input, return, ...]
  * Block store
  * BDocuments
  * K-V Properties for resources
  * Observer block http://www.activiti.org/userguide/index.html#bpmnEvents
  * Triggers(that runs something just from template and request[POST /auth/token?acton=...])

* Assembled
  * BProcess returns
  * CTX[Res -> BPS]
  * FrameMarker
  * main.scala.maps.FrameLink ctx-ctx links
  ** main.scala.utils.Space || Make support for frame elements
  * Assembly Function [ Provide access to triple (object, params, arguments)] 1. req(el, in), assebmly(frame), running
  ** [* CHAIN Invoke -> Process -> Process ]
  * Return in BProcess  [ Blocks that comes after process invoked ]
  * Return in ProcElems [ Block that return blocks and arg&params ]

  * Bridge
  * Behav Resources
  * Behav model methods and elements
  * Templates BP, ctx, sbj?
  * Neo4J integration?
  * Complex block
  * Block register / Elem -> Block conversion
  * Sandbox for testing external Blocks
  * Service
  * RPC
  * Zappier
  * Regressor-core
