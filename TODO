





















* RunFrom TRY


* Input try
http://jsfiddle.net/fdDph/9/
http://plnkr.co/edit/mNs6HB86p6ioByul0GD9?p=preview
http://embed.plnkr.co/TAXmsQlSkYhY2isCKIAw/preview


* Data sync from logger to composite values of proc elements
* TempItem Restore(expands, input)
* Space schema basic
* JOIN 
http://stackoverflow.com/questions/16707373/inner-join-doesnt-work-in-slick
http://stackoverflow.com/questions/14377023/outer-join-with-scala-slick
http://stackoverflow.com/questions/22436428/join-tables-in-different-databases-using-slick-2-with-auto-generated-data-model






* SSL http://spray.io/documentation/1.1-M7/spray-can/http-client/#ssl-support
* Spray outlook https://github.com/ctcarrier/ttpresentation/tree/master/src/main/scala/com/ttpresentation https://github.com/ctcarrier/bl-rest
* PASSWORD SALT 
https://github.com/scalapenos/spray-auth/blob/master/src/test/scala/scalapenos/spray/auth/CryptoSupportSpec.scala 
https://github.com/agrublev/angularLocalStorage

* Connection limit https://github.com/spray/connection-test
* Error ajax
http://kufli.blogspot.ru/2013/08/sprayio-rest-service-exception.html
http://plnkr.co/edit/lzYaZt?p=preview
http://www.egobrain.ru/blog/2014/02/13/obrabotka-oshibok-poumolchaniiu-angularjs/

* Security Restrict DTO Action(bprocess, procelems, space, check access)








* Space Data sync from logger to composite values of proc elements
* Space TempItem Restore(expands, input)

  * Ownings
  * Companion ResAct -> Input, Times ...


  ** Input block while proc/context running(wait for input if it paused)







* Id splitting to trait, restrict ID using in code
* Change ID to LONG everywhere
* selector attributes for Station while INPUT REQUEST occurred






* Blocks {

  * RunFromSpace

Blocks
  ** Condition
  * Confirm
  * Collection
  * Result
  * Checker
  * Stopper Pause
  * Loop - Cycle
  || Process owning, viewers, access // by owning tables Employees/Clients/Firm + Groups assigns
  * scope ctx, bp views



  * bRICK pOINTER FOR rEStYPE(INTVAL)
  * GroupPointer fetch before invoke
  * Composite values getter and setters

  * error handling [checker before invoke, brick error - though invoking] /isOptionalLink/* checker for arguments and params [ ]
  * Dopel feature

}










* Assembled
  * BProcess returns
  * CTX[Res -> BPS]
  * FrameMarker
  * main.scala.maps.FrameLink ctx-ctx links
  ** main.scala.utils.Space || Make support for frame elements
  * Assembly Function [ Provide access to triple (object, params, arguments)] 1. req(el, in), assebmly(frame), running
  ** [* CHAIN Invoke -> Process -> Process ]
  * Return in BProcess  [ Blocks that comes after process invoked ]
  * Return in ProcElems [ Block that return blocks and arg&params ] 

* Misc
  
  * Graph.js

  /** 2 Books read **/
    http://www.mulesoft.com/platform/soa
    http://www.activiti.org/userguide/index.html#bpmnSequenceFlow
    http://www.activiti.org/userguide/index.html#bpmnTask
    http://www.activiti.org/userguide/index.html#bpmnGateways
    http://www.activiti.org/userguide/index.html#bpmnSubprocessAndCallActivity


/Final/
  * Collab & sharing
  * Link block[Input, return, ...]
  * Block store
  * BDocuments
  * K-V Properties for resources
  * Observer block http://www.activiti.org/userguide/index.html#bpmnEvents
  * Triggers(that runs something just from template and request[POST /auth/token?acton=...])

  * Merchant?
  * Bridge
  * Behav Resources
  * Behav model methods and elements
  * Templates BP, ctx, sbj?
  * Neo4J integration?
  * Complex block
  * Block register / Elem -> Block conversion
  * Sandbox for testing external Blocks
  * Service
  * RPC
  * Zappier
  * Regressor-core
