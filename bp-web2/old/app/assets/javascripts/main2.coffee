# Helpers for working with storage
Storage::setObj = (key, obj) ->
  @setItem key, JSON.stringify(obj)

Storage::getObj = (key) ->
  JSON.parse @getItem(key)


# Card 
not (e) ->
  if "object" is typeof exports
    module.exports = e()
  else if "function" is typeof define and define.amd
    define e
  else
    f = undefined
    (if "undefined" isnt typeof window then f = window else (if "undefined" isnt typeof global then f = global else "undefined" isnt typeof self and (f = self)))
    f.card = e()
  return
(->
  define = undefined
  module = undefined
  exports = undefined
  (e = (t, n, r) ->
    s = (o, u) ->
      unless n[o]
        unless t[o]
          a = typeof require is "function" and require
          return a(o, not 0)  if not u and a
          return i(o, not 0)  if i
          throw new Error("Cannot find module '" + o + "'")
        f = n[o] = exports: {}
        t[o][0].call f.exports, ((e) ->
          n = t[o][1][e]
          s (if n then n else e)
        ), f, f.exports, e, t, n, r
      n[o].exports
    i = typeof require is "function" and require
    o = 0

    while o < r.length
      s r[o]
      o++
    s
  )(
    1: [
      (_dereq_, module, exports) ->
        
        # Generated by CoffeeScript 1.7.1
        (->
          $ = undefined
          cardFromNumber = undefined
          cardFromType = undefined
          cards = undefined
          defaultFormat = undefined
          formatBackCardNumber = undefined
          formatBackExpiry = undefined
          formatCardNumber = undefined
          formatExpiry = undefined
          formatForwardExpiry = undefined
          formatForwardSlashAndSpace = undefined
          hasTextSelected = undefined
          luhnCheck = undefined
          reFormatCardNumber = undefined
          reFormatExpiry = undefined
          restrictCVC = undefined
          restrictCardNumber = undefined
          restrictExpiry = undefined
          restrictNumeric = undefined
          setCardType = undefined
          __slice_ = [].slice
          __indexOf_ = [].indexOf or (item) ->
            i = 0
            l = @length

            while i < l
              return i  if i of this and this[i] is item
              i++
            -1

          $ = jQuery
          $.payment = {}
          $.payment.fn = {}
          $.fn.payment = ->
            args = undefined
            method = undefined
            method = arguments[0]
            args = (if 2 <= arguments.length then __slice_.call(arguments, 1) else [])

            $.payment.fn[method].apply this, args

          defaultFormat = /(\d{1,4})/g
          cards = [
            {
              type: "visaelectron"
              pattern: /^4(026|17500|405|508|844|91[37])/
              format: defaultFormat
              length: [16]
              cvcLength: [3]
              luhn: true
            }
            {
              type: "maestro"
              pattern: /^(5(018|0[23]|[68])|6(39|7))/
              format: defaultFormat
              length: [
                12
                13
                14
                15
                16
                17
                18
                19
              ]
              cvcLength: [3]
              luhn: true
            }
            {
              type: "forbrugsforeningen"
              pattern: /^600/
              format: defaultFormat
              length: [16]
              cvcLength: [3]
              luhn: true
            }
            {
              type: "dankort"
              pattern: /^5019/
              format: defaultFormat
              length: [16]
              cvcLength: [3]
              luhn: true
            }
            {
              type: "visa"
              pattern: /^4/
              format: defaultFormat
              length: [
                13
                16
              ]
              cvcLength: [3]
              luhn: true
            }
            {
              type: "mastercard"
              pattern: /^5[0-5]/
              format: defaultFormat
              length: [16]
              cvcLength: [3]
              luhn: true
            }
            {
              type: "amex"
              pattern: /^3[47]/
              format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/
              length: [15]
              cvcLength: [
                3
                4
              ]
              luhn: true
            }
            {
              type: "dinersclub"
              pattern: /^3[0689]/
              format: defaultFormat
              length: [14]
              cvcLength: [3]
              luhn: true
            }
            {
              type: "discover"
              pattern: /^6([045]|22)/
              format: defaultFormat
              length: [16]
              cvcLength: [3]
              luhn: true
            }
            {
              type: "unionpay"
              pattern: /^(62|88)/
              format: defaultFormat
              length: [
                16
                17
                18
                19
              ]
              cvcLength: [3]
              luhn: false
            }
            {
              type: "jcb"
              pattern: /^35/
              format: defaultFormat
              length: [16]
              cvcLength: [3]
              luhn: true
            }
          ]
          cardFromNumber = (num) ->
            card = undefined
            _i = undefined
            _len = undefined
            num = (num + "").replace(/\D/g, "")
            _i = 0
            _len = cards.length

            while _i < _len
              card = cards[_i]
              return card  if card.pattern.test(num)
              _i++
            return

          cardFromType = (type) ->
            card = undefined
            _i = undefined
            _len = undefined
            _i = 0
            _len = cards.length

            while _i < _len
              card = cards[_i]
              return card  if card.type is type
              _i++
            return

          luhnCheck = (num) ->
            digit = undefined
            digits = undefined
            odd = undefined
            sum = undefined
            _i = undefined
            _len = undefined
            odd = true
            sum = 0
            digits = (num + "").split("").reverse()
            _i = 0
            _len = digits.length

            while _i < _len
              digit = digits[_i]
              digit = parseInt(digit, 10)
              digit *= 2  if odd = not odd
              digit -= 9  if digit > 9
              sum += digit
              _i++
            sum % 10 is 0

          hasTextSelected = ($target) ->
            _ref = undefined
            return true  if ($target.prop("selectionStart")?) and $target.prop("selectionStart") isnt $target.prop("selectionEnd")
            return true  if (if typeof document isnt "undefined" and document isnt null then (if (_ref = document.selection)? then (if typeof _ref.createRange is "function" then _ref.createRange().text else undefined) else undefined) else undefined)
            false

          reFormatCardNumber = (e) ->
            setTimeout ->
              $target = undefined
              value = undefined
              $target = $(e.currentTarget)
              value = $target.val()
              value = $.payment.formatCardNumber(value)
              $target.val value


          formatCardNumber = (e) ->
            $target = undefined
            card = undefined
            digit = undefined
            length = undefined
            re = undefined
            upperLength = undefined
            value = undefined
            digit = String.fromCharCode(e.which)
            return  unless /^\d+$/.test(digit)
            $target = $(e.currentTarget)
            value = $target.val()
            card = cardFromNumber(value + digit)
            length = (value.replace(/\D/g, "") + digit).length
            upperLength = 16
            upperLength = card.length[card.length.length - 1]  if card
            return  if length >= upperLength
            return  if ($target.prop("selectionStart")?) and $target.prop("selectionStart") isnt value.length
            if card and card.type is "amex"
              re = /^(\d{4}|\d{4}\s\d{6})$/
            else
              re = /(?:^|\s)(\d{4})$/
            if re.test(value)
              e.preventDefault()
              setTimeout ->
                $target.val value + " " + digit

            else if re.test(value + digit)
              e.preventDefault()
              setTimeout ->
                $target.val value + digit + " "


          formatBackCardNumber = (e) ->
            $target = undefined
            value = undefined
            $target = $(e.currentTarget)
            value = $target.val()
            return  if e.which isnt 8
            return  if ($target.prop("selectionStart")?) and $target.prop("selectionStart") isnt value.length
            if /\d\s$/.test(value)
              e.preventDefault()
              setTimeout ->
                $target.val value.replace(/\d\s$/, "")

            else if /\s\d?$/.test(value)
              e.preventDefault()
              setTimeout ->
                $target.val value.replace(/\s\d?$/, "")


          reFormatExpiry = (e) ->
            setTimeout ->
              $target = undefined
              value = undefined
              $target = $(e.currentTarget)
              value = $target.val()
              value = $.payment.formatExpiry(value)
              $target.val value


          formatExpiry = (e) ->
            $target = undefined
            digit = undefined
            val = undefined
            digit = String.fromCharCode(e.which)
            return  unless /^\d+$/.test(digit)
            $target = $(e.currentTarget)
            val = $target.val() + digit
            if /^\d$/.test(val) and (val isnt "0" and val isnt "1")
              e.preventDefault()
              setTimeout ->
                $target.val "0" + val + " / "

            else if /^\d\d$/.test(val)
              e.preventDefault()
              setTimeout ->
                $target.val "" + val + " / "


          formatForwardExpiry = (e) ->
            $target = undefined
            digit = undefined
            val = undefined
            digit = String.fromCharCode(e.which)
            return  unless /^\d+$/.test(digit)
            $target = $(e.currentTarget)
            val = $target.val()
            $target.val "" + val + " / "  if /^\d\d$/.test(val)

          formatForwardSlashAndSpace = (e) ->
            $target = undefined
            val = undefined
            which = undefined
            which = String.fromCharCode(e.which)
            return  unless which is "/" or which is " "
            $target = $(e.currentTarget)
            val = $target.val()
            $target.val "0" + val + " / "  if /^\d$/.test(val) and val isnt "0"

          formatBackExpiry = (e) ->
            $target = undefined
            value = undefined
            $target = $(e.currentTarget)
            value = $target.val()
            return  if e.which isnt 8
            return  if ($target.prop("selectionStart")?) and $target.prop("selectionStart") isnt value.length
            if /\s\/\s\d?$/.test(value)
              e.preventDefault()
              setTimeout ->
                $target.val value.replace(/\s\/\s\d?$/, "")


          restrictNumeric = (e) ->
            input = undefined
            return true  if e.metaKey or e.ctrlKey
            return false  if e.which is 32
            return true  if e.which is 0
            return true  if e.which < 33
            input = String.fromCharCode(e.which)
            !!/[\d\s]/.test(input)

          restrictCardNumber = (e) ->
            $target = undefined
            card = undefined
            digit = undefined
            value = undefined
            $target = $(e.currentTarget)
            digit = String.fromCharCode(e.which)
            return  unless /^\d+$/.test(digit)
            return  if hasTextSelected($target)
            value = ($target.val() + digit).replace(/\D/g, "")
            card = cardFromNumber(value)
            if card
              value.length <= card.length[card.length.length - 1]
            else
              value.length <= 16

          restrictExpiry = (e) ->
            $target = undefined
            digit = undefined
            value = undefined
            $target = $(e.currentTarget)
            digit = String.fromCharCode(e.which)
            return  unless /^\d+$/.test(digit)
            return  if hasTextSelected($target)
            value = $target.val() + digit
            value = value.replace(/\D/g, "")
            false  if value.length > 6

          restrictCVC = (e) ->
            $target = undefined
            digit = undefined
            val = undefined
            $target = $(e.currentTarget)
            digit = String.fromCharCode(e.which)
            return  unless /^\d+$/.test(digit)
            return  if hasTextSelected($target)
            val = $target.val() + digit
            val.length <= 4

          setCardType = (e) ->
            $target = undefined
            allTypes = undefined
            card = undefined
            cardType = undefined
            val = undefined
            $target = $(e.currentTarget)
            val = $target.val()
            cardType = $.payment.cardType(val) or "unknown"
            unless $target.hasClass(cardType)
              allTypes = (->
                _i = undefined
                _len = undefined
                _results = undefined
                _results = []
                _i = 0
                _len = cards.length

                while _i < _len
                  card = cards[_i]
                  _results.push card.type
                  _i++
                _results
              )()
              $target.removeClass "unknown"
              $target.removeClass allTypes.join(" ")
              $target.addClass cardType
              $target.toggleClass "identified", cardType isnt "unknown"
              $target.trigger "payment.cardType", cardType

          $.payment.fn.formatCardCVC = ->
            @payment "restrictNumeric"
            @on "keypress", restrictCVC
            this

          $.payment.fn.formatCardExpiry = ->
            @payment "restrictNumeric"
            @on "keypress", restrictExpiry
            @on "keypress", formatExpiry
            @on "keypress", formatForwardSlashAndSpace
            @on "keypress", formatForwardExpiry
            @on "keydown", formatBackExpiry
            @on "change", reFormatExpiry
            @on "input", reFormatExpiry
            this

          $.payment.fn.formatCardNumber = ->
            @payment "restrictNumeric"
            @on "keypress", restrictCardNumber
            @on "keypress", formatCardNumber
            @on "keydown", formatBackCardNumber
            @on "keyup", setCardType
            @on "paste", reFormatCardNumber
            @on "change", reFormatCardNumber
            @on "input", reFormatCardNumber
            @on "input", setCardType
            this

          $.payment.fn.restrictNumeric = ->
            @on "keypress", restrictNumeric
            this

          $.payment.fn.cardExpiryVal = ->
            $.payment.cardExpiryVal $(this).val()

          $.payment.cardExpiryVal = (value) ->
            month = undefined
            prefix = undefined
            year = undefined
            _ref = undefined
            value = value.replace(/\s/g, "")
            _ref = value.split("/", 2)
            month = _ref[0]
            year = _ref[1]

            if ((if year? then year.length else undefined)) is 2 and /^\d+$/.test(year)
              prefix = (new Date).getFullYear()
              prefix = prefix.toString().slice(0, 2)
              year = prefix + year
            month = parseInt(month, 10)
            year = parseInt(year, 10)
            month: month
            year: year

          $.payment.validateCardNumber = (num) ->
            card = undefined
            _ref = undefined
            num = (num + "").replace(/\s+|-/g, "")
            return false  unless /^\d+$/.test(num)
            card = cardFromNumber(num)
            return false  unless card
            (_ref = num.length
            __indexOf_.call(card.length, _ref) >= 0
            ) and (card.luhn is false or luhnCheck(num))

          $.payment.validateCardExpiry = (month, year) ->
            currentTime = undefined
            expiry = undefined
            _ref = undefined
            if typeof month is "object" and "month" of month
              _ref = month
              month = _ref.month
              year = _ref.year
            return false  unless month and year
            month = $.trim(month)
            year = $.trim(year)
            return false  unless /^\d+$/.test(month)
            return false  unless /^\d+$/.test(year)
            return false  unless 1 <= month and month <= 12
            if year.length is 2
              if year < 70
                year = "20" + year
              else
                year = "19" + year
            return false  if year.length isnt 4
            expiry = new Date(year, month)
            currentTime = new Date
            expiry.setMonth expiry.getMonth() - 1
            expiry.setMonth expiry.getMonth() + 1, 1
            expiry > currentTime

          $.payment.validateCardCVC = (cvc, type) ->
            card = undefined
            _ref = undefined
            cvc = $.trim(cvc)
            return false  unless /^\d+$/.test(cvc)
            card = cardFromType(type)
            if card?
              _ref = cvc.length
              __indexOf_.call(card.cvcLength, _ref) >= 0
            else
              cvc.length >= 3 and cvc.length <= 4

          $.payment.cardType = (num) ->
            _ref = undefined
            return null  unless num
            ((if (_ref = cardFromNumber(num))? then _ref.type else undefined)) or null

          $.payment.formatCardNumber = (num) ->
            card = undefined
            groups = undefined
            upperLength = undefined
            _ref = undefined
            card = cardFromNumber(num)
            return num  unless card
            upperLength = card.length[card.length.length - 1]
            num = num.replace(/\D/g, "")
            num = num.slice(0, upperLength)
            if card.format.global
              (if (_ref = num.match(card.format))? then _ref.join(" ") else undefined)
            else
              groups = card.format.exec(num)
              return  unless groups?
              groups.shift()
              groups = $.grep(groups, (n) ->
                n
              )
              groups.join " "

          $.payment.formatExpiry = (expiry) ->
            mon = undefined
            parts = undefined
            sep = undefined
            year = undefined
            parts = expiry.match(/^\D*(\d{1,2})(\D+)?(\d{1,4})?/)
            return ""  unless parts
            mon = parts[1] or ""
            sep = parts[2] or ""
            year = parts[3] or ""
            sep = " / "  if year.length > 0 or (sep.length > 0 and not (/\ \/?\ ?/.test(sep)))
            if mon.length is 1 and (mon isnt "0" and mon isnt "1")
              mon = "0" + mon
              sep = " / "
            mon + sep + year

          return
        ).call this
      {
        #{}
      }
    ]
    2: [
      (_dereq_, module, exports) ->
        $ = undefined
        Card = undefined
        __indexOf_ = [].indexOf or (item) ->
          i = 0
          l = @length

          while i < l
            return i  if i of this and this[i] is item
            i++
          -1

        __slice_ = [].slice
        _dereq_ "jquery.payment"
        $ = jQuery
        $.card = {}
        $.card.fn = {}
        $.fn.card = (opts) ->
          $.card.fn.construct.apply this, opts

        Card = (->
          Card = (el, opts) ->
            @options = $.extend(true, {}, @defaults, opts)
            $.extend @options.messages, $.card.messages
            $.extend @options.values, $.card.values
            @$el = $(el)
            unless @options.container
              console.log "Please provide a container"
              return
            @$container = $(@options.container)
            @render()
            @attachHandlers()
            @handleInitialValues()
            return
          Card::cardTemplate = "<div class=\"card-container\">\n    <div class=\"card\">\n        <div class=\"front\">\n                <div class=\"card-logo visa\">visa</div>\n                <div class=\"card-logo mastercard\">MasterCard</div>\n                <div class=\"card-logo amex\"></div>\n                <div class=\"card-logo discover\">discover</div>\n            <div class=\"lower\">\n                <div class=\"shiny\"></div>\n                <div class=\"cvc display\">{{cvc}}</div>\n                <div class=\"numberr display\">{{number}}</div>\n                <div class=\"name display\">{{name}}</div>\n                <div class=\"expiry display\" data-before=\"{{monthYear}}\" data-after=\"{{validDate}}\">{{expiry}}</div>\n            </div>\n        </div>\n        <div class=\"back\">\n            <div class=\"bar\"></div>\n            <div class=\"cvc display\">{{cvc}}</div>\n            <div class=\"shiny\"></div>\n        </div>\n    </div>\n</div>"
          Card::template = (tpl, data) ->
            tpl.replace /\{\{(.*?)\}\}/g, (match, key, str) ->
              data[key]


          Card::cardTypes = [
            "maestro"
            "dinersclub"
            "laser"
            "jcb"
            "unionpay"
            "discover"
            "mastercard"
            "amex"
            "visa"
          ]
          Card::defaults =
            formatting: true
            formSelectors:
              numberInput: "input[name=\"number\"]"
              expiryInput: "input[name=\"expiry\"]"
              cvcInput: "input[name=\"cvc\"]"
              nameInput: "input[name=\"name\"]"

            cardSelectors:
              cardContainer: ".card-container"
              card: ".card"
              numberDisplay: ".numberr"
              expiryDisplay: ".expiry"
              cvcDisplay: ".cvc"
              nameDisplay: ".name"

            messages:
              validDate: "valid\nthru"
              monthYear: "month/year"

            values:
              number: "&bull;&bull;&bull;&bull; &bull;&bull;&bull;&bull; &bull;&bull;&bull;&bull; &bull;&bull;&bull;&bull;"
              cvc: "&bull;&bull;&bull;"
              expiry: "&bull;&bull;/&bull;&bull;"
              name: "Full Name"

            classes:
              valid: "card-valid"
              invalid: "card-invalid"

          Card::render = ->
            baseWidth = undefined
            ua = undefined
            @$container.append @template(@cardTemplate, $.extend({}, @options.messages, @options.values))
            $.each @options.cardSelectors, ((_this) ->
              (name, selector) ->
                _this["$" + name] = _this.$container.find(selector)
            )(this)
            $.each @options.formSelectors, ((_this) ->
              (name, selector) ->
                obj = undefined
                if _this.options[name]
                  obj = $(_this.options[name])
                else
                  obj = _this.$el.find(selector)
                console.error "Card can't find a " + name + " in your form."  unless obj.length
                _this["$" + name] = obj
            )(this)
            if @options.formatting
              @$numberInput.payment "formatCardNumber"
              @$cvcInput.payment "formatCardCVC"
              @$expiryInput.payment "formatCardExpiry"  if @$expiryInput.length is 1
            if @options.width
              baseWidth = parseInt(@$cardContainer.css("width"))
              @$cardContainer.css "transform", "scale(" + (@options.width / baseWidth) + ")"
            if (if typeof navigator isnt "undefined" and navigator isnt null then navigator.userAgent else undefined)
              ua = navigator.userAgent.toLowerCase()
              @$card.addClass "safari"  if ua.indexOf("safari") isnt -1 and ua.indexOf("chrome") is -1
            @$card.addClass "ie-10"  if new Function("/*@cc_on return @_jscript_version; @*/")()

          Card::attachHandlers = ->
            expiryFilters = undefined
            @$numberInput.bindVal(@$numberDisplay,
              fill: false
              filters: @validToggler("cardNumber")
            ).on "payment.cardType", @handle("setCardType")
            expiryFilters = [(val) ->
              val.replace /(\s+)/g, ""
            ]
            expiryFilters.push @validToggler("cardExpiry")  if @$expiryInput.length is 1
            @$expiryInput.bindVal @$expiryDisplay,
              join: (text) ->
                if text[0].length is 2 or text[1]
                  "/"
                else
                  ""

              filters: expiryFilters

            @$cvcInput.bindVal(@$cvcDisplay,
              filters: @validToggler("cardCVC")
            ).on("focus", @handle("flipCard")).on "blur", @handle("flipCard")
            @$nameInput.bindVal(@$nameDisplay,
              fill: false
              filters: @validToggler("cardHolderName")
              join: " "
            ).on "keydown", @handle("captureName")

          Card::handleInitialValues = ->
            $.each @options.formSelectors, ((_this) ->
              (name, selector) ->
                el = undefined
                el = _this["$" + name]
                if el.val()
                  el.trigger "paste"
                  setTimeout ->
                    el.trigger "keyup"

            )(this)

          Card::handle = (fn) ->
            ((_this) ->
              (e) ->
                $el = undefined
                args = undefined
                $el = $(e.currentTarget)
                args = Array::slice.call(arguments)
                args.unshift $el
                _this.handlers[fn].apply _this, args
            ) this

          Card::validToggler = (validatorName) ->
            isValid = undefined
            if validatorName is "cardExpiry"
              isValid = (val) ->
                objVal = undefined
                objVal = $.payment.cardExpiryVal(val)
                $.payment.validateCardExpiry objVal.month, objVal.year
            else if validatorName is "cardCVC"
              isValid = ((_this) ->
                (val) ->
                  $.payment.validateCardCVC val, _this.cardType
              )(this)
            else if validatorName is "cardNumber"
              isValid = (val) ->
                $.payment.validateCardNumber val
            else if validatorName is "cardHolderName"
              isValid = (val) ->
                val isnt ""
            ((_this) ->
              (val, $in, $out) ->
                result = undefined
                result = isValid(val)
                _this.toggleValidClass $in, result
                _this.toggleValidClass $out, result
                val
            ) this

          Card::toggleValidClass = (el, test) ->
            el.toggleClass @options.classes.valid, test
            el.toggleClass @options.classes.invalid, not test

          Card::handlers =
            setCardType: ($el, e, cardType) ->
              unless @$card.hasClass(cardType)
                @$card.removeClass "unknown"
                @$card.removeClass @cardTypes.join(" ")
                @$card.addClass cardType
                @$card.toggleClass "identified", cardType isnt "unknown"
                @cardType = cardType

            flipCard: ($el, e) ->
              @$card.toggleClass "flipped"

            captureName: ($el, e) ->
              allowedSymbols = undefined
              banKeyCodes = undefined
              keyCode = undefined
              keyCode = e.which or e.keyCode
              banKeyCodes = [
                48
                49
                50
                51
                52
                53
                54
                55
                56
                57
                106
                107
                109
                110
                111
                186
                187
                188
                189
                190
                191
                192
                219
                220
                221
                222
              ]
              allowedSymbols = [
                189
                109
                190
                110
                222
              ]
              e.preventDefault()  if banKeyCodes.indexOf(keyCode) isnt -1 and not (not e.shiftKey and __indexOf_.call(allowedSymbols, keyCode) >= 0)

          $.fn.bindVal = (out, opts) ->
            $el = undefined
            i = undefined
            joiner = undefined
            o = undefined
            outDefaults = undefined
            opts = {}  unless opts?
            opts.fill = opts.fill or false
            opts.filters = opts.filters or []
            opts.filters = [opts.filters]  unless opts.filters instanceof Array
            opts.join = opts.join or ""
            unless typeof opts.join is "function"
              joiner = opts.join
              opts.join = ->
                joiner
            $el = $(this)
            outDefaults = (->
              _i = undefined
              _len = undefined
              _results = undefined
              _results = []
              i = _i = 0
              _len = out.length

              while _i < _len
                o = out[i]
                _results.push out.eq(i).text()
                i = ++_i
              _results
            )()
            $el.on "focus", ->
              out.addClass "focused"

            $el.on "blur", ->
              out.removeClass "focused"

            $el.on "keyup change paste", (e) ->
              filter = undefined
              join = undefined
              outVal = undefined
              val = undefined
              _i = undefined
              _j = undefined
              _len = undefined
              _len1 = undefined
              _ref = undefined
              _results = undefined
              val = $el.map(->
                $(this).val()
              ).get()
              join = opts.join(val)
              val = val.join(join)
              val = ""  if val is join
              _ref = opts.filters
              _i = 0
              _len = _ref.length

              while _i < _len
                filter = _ref[_i]
                val = filter(val, $el, out)
                _i++
              _results = []
              i = _j = 0
              _len1 = out.length

              while _j < _len1
                o = out[i]
                if opts.fill
                  outVal = val + outDefaults[i].substring(val.length)
                else
                  outVal = val or outDefaults[i]
                _results.push out.eq(i).text(outVal)
                i = ++_j
              _results

            $el

          Card
        )()
        $.fn.extend card: ->
          args = undefined
          option = undefined
          option = arguments[0]
          args = (if 2 <= arguments.length then __slice_.call(arguments, 1) else [])

          @each ->
            $this = undefined
            data = undefined
            $this = $(this)
            data = $this.data("card")
            $this.data "card", (data = new Card(this, option))  unless data
            data[option].apply data, args  if typeof option is "string"


      {
        "jquery.payment": 1
      }
    ]
  , {}, [2]) 2
)
