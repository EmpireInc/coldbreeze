# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Enable webjar based resources to be returned
GET         /webjars/*file              controllers.WebJarAssets.at(file)

# Home page
GET         /                           @controllers.Application.index()
GET         /index11                    @controllers.Application.index11()
#POST    /login                  @controllers.Application.login()

->         /auth                securesocial.Routes

# Login page
#GET     /login                      securesocial.controllers.LoginPage.login
#GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration and password handling 
#GET     /signup                     securesocial.controllers.Registration.startSignUp
#POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
#GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token               @controllers.CustomRegistrationController.handleSignUp(token)
#GET     /reset                      securesocial.controllers.Registration.startResetPassword
#POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
#GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
#POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
#GET     /password                   securesocial.controllers.PasswordChange.page
#POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange

# Providers entry points
#GET     /authenticate/:provider     securesocial.controllers.ProviderController.authenticate(provider)
#POST    /authenticate/:provider     securesocial.controllers.ProviderController.authenticateByPost(provider)
#GET     /not-authorized             securesocial.controllers.ProviderController.notAuthorized

GET        /only-twitter        @controllers.Application.onlyTwitter
GET        /link-result         @controllers.Application.linkResult
GET        /current-user        @controllers.Application.currentUser

# Custom
GET        /custom/login        @controllers.CustomLoginController.login
GET        /custom/logout       @controllers.CustomLoginController.logout


# BProcess
#GET         /bprocesses                 BPDAO.getAll
#POST        /bprocesses                 entity(as[BProcessDTO])        BPDAO.pull_object(bprocess)
#GET         /bprocess_full/:id          BPInfo(ProcElemDAO.findByBPId(id), BPStationDAO.findByBPId(id), BPLoggerDAO.findByBPId(id))
#GET         /bprocess/:id/info
#GET         /bprocess/:id/elements        ProcElemDAO.findByBPId(id)
#GET         /bprocess/:id/logs            BPLoggerDAO.findByBPId(id)
#GET         /bprocess/:id/stations        BPStationDAO.findByBPId(id)
#GET         /bprocess/:id/active_stations BPStationDAO.areActiveForBP(id)
#GET         /bprocess/:id/last_run        BPLoggerDAO.lastRunOfBP(id)

#GET         /businesses/:id  ClientDAO.getBusiness(id)

#GET  /block/:id/info                ProcElemDAO.findById(id)
#POST /block/:id/order               ProcElemDAO.update_order(id, orderNum)
#GET  /logs/:id                      BPLoggerDAO.findByBPId(id)
#GET  /log/:id                       BPLoggerDAO.findById(id)
#GET  /stations/:id                  BPStationDAO.findByBPId(id)
#GET  /station/:id                   BPStationDAO.findById(id)
#POST /request                       entity(as[InvokeRequest])


GET         /bprocess/index             @controllers.Application.bprocesses()
GET         /bprocess                   @controllers.Application.bprocess()






# Send token by email
##GET         /api/v1/token/get           controllers.APIController.getToken()
##GET         /api/v1/token/              controllers.APIController.readToken()
##GET         /api/v1/token/:token        controllers.APIController.readByToken(token: String)


# JavaScript routes object
GET     /jsroutes.js            @controllers.Application.jsRoutes()

GET     /assets/*file           controllers.Assets.versioned(path="/public", file: Asset)
# Map the JS resource paths
GET         /*file                      controllers.Assets.at(path="/public", file)

# Sign up
#GET         /signup                     controllers.Authentication.prepareSignup
#POST        /signup                     controllers.Authentication.sendSignupEmail
#GET         /register/:token            controllers.Authentication.prepareRegister(token: String)
#POST        /register/:token            controllers.Authentication.register(token: String)


# Reset password
#GET         /reset                      controllers.Authentication.prepareReset
#POST        /reset                      controllers.Authentication.sendResetEmail

# Authentication
#GET         /login                      controllers.Authentication.login
#POST        /login                      controllers.Authentication.authenticate
#GET         /logout                     controllers.Authentication.logout
